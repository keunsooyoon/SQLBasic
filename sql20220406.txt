데이터 베이스 database

structured data
정형데이터 - 틀이 잡혀있는 체계화된 데이터
	   excel, csv ....

unstructured data
비정형데이터-특이 없이 사전 정의가 없는 데이터, 다양하고 방대한 양의 데이터
           텍스트, 이미지, 음원, 음성.

오라클 데이터 베이스는 정형데이터를 다루는 관계형 데이터베이스이다. 많은 기업들에서는 관계형 데이터 베이스를 많이 사용한다. 
SQL 은 정형 데이터로 만들어진 관계형 데이터베이스를 조작하는 언어이다. 

관계형 데이터베이스란 열과 행 2차원으로 이루어진 테이블을 중심으로 설계되고 키와 관계라는 연결고리로 그 테이블들을 사용하여 원하는 방식으로 데이터를 조회하고 가공하는 방식의 데이터베이스이다. 
기타 계층형 DB 개체지향DB XML DB



SQL 은 관계형 데이터베이스들에서 사용이 되는 표준 언어 1970년대에 SEQUEL이라는 언어를 기반으로 만들어졌다.  1980년대에 ANSI ISO 표준을 따르고 있다. 

SQL특징
1 사용하기쉽다
2 비절차적 언어이다
3 데이터를 정의 검색 조작 한다.
4 표준언어이다. 




# 테이블 전체 내용 보기

<<<<<<< HEAD
 
# 테이블 전체 내용 보기
SELECT *
=======
SELECT * 
>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
FROM hr.employees;



# 특정 열만 출력하기
<<<<<<< HEAD
=======

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT employee_id, first_name, last_name
FROM hr.employees;



# 특정열을 기준으로 내림차순 정렬하여 출력하기
<<<<<<< HEAD
=======

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT employee_id, first_name, last_name
FROM hr.employees
ORDER BY employee_id DESC;



# 고유한 하나씩만 출력
<<<<<<< HEAD
SELECT DISTINCT job_id
FROM hr.employees;



# 별칭 설정 AS 생략가능
=======

SELECT DISTINCT job_id
FROM hr.employees;
 

# 별칭 설정 AS 생략가능

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT employee_id AS 사원번호, first_name AS 이름, last_name AS 성
FROM hr.employees;



<<<<<<< HEAD
# 열값들을 붙여서 하나의 셀에 출력
SELECT employee_id, first_name || ' ' || last_name
FROM hr.employees;


SELECT employee_id, first_name || ' ' || last_name,
        email || '@' || 'company.com'
FROM hr.employees;



# 기본 열값을 이용한 계산
SELECT employee_id, salary, salary+500, salary-100, (salary*1.1)/2
FROM hr.employees;


SELECT employee_id AS 사원번호, 
=======

# 열값들을 붙여서 하나의 셀에 출력

SELECT employee_id ,first_name ||  ' ' || last_name
FROM hr.employees;


SELECT employee_id ,first_name ||  ' ' || last_name,
       email || '@' || 'company.com'
FROM hr.employees;


# 기본 열값을 이용한 계산

SELECT employee_id ,salary, salary+500, salary-100, (salary*1.1)/2
FROM hr.employees;



SELECT employee_id AS 사원번호,
>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
        salary AS 급여, 
        salary+500 AS 추가급여, 
        salary-100 AS 인하급여, 
        (salary*1.1)/2 AS 조정급여
FROM hr.employees;


<<<<<<< HEAD

# WHERE 절 행에서 원하는 값을 추출할 때 사용
=======
WHERE 절  행에서 원하는 값을 추출할때 사용

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE employee_id=100;

<<<<<<< HEAD
   글자로 찾을 때는 작은 따옴표 사용(대소문자 가림)
=======

  글자로 찾을 떄는 작은 따옴표 사용(대소문자 가림)

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE first_name = 'David';

<<<<<<< HEAD
   부등호연산자
=======

   부등호 연산자
   
>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE employee_id >= 105;



<<<<<<< HEAD

# BETWEEN a AND b 숫자 a부터 b까지
=======
BETWEEN a AND b   숫자 a부터 b까지

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE salary BETWEEN 10000 AND 20000;



<<<<<<< HEAD
# IN 연산자 특정 항목들이 포함된 행들만 추출
SELECT *
FROM hr.employees
WHERE salary IN (10000,17000,24000);



# LIKE 연산자
LIKE 연산자는 조회 조건 값이 명확하지 않을때 사용

   % 몇글자가 오던 글자가 없건 상관하지 않는다.
SELECT *
FROM hr.employees
WHERE job_id LIKE 'AD%'
   
   _ 글자 1개를 의미
=======
IN 연산자    특정 항목들이 포함된 행들만 추출

SELECT *
FROM hr.employees
WHERE salary BETWEEN 10000 AND 20000;



LIKE 연산자

LIKE 연산자는 조회 조건 값이 명확하지 않을 때 사용
% 몇글자가 오던 글자가 없건 상관하지 않는다. 
_ 글자 1개를 의미

SELECT *
FROM hr.employees
WHERE job_id LIKE 'AD%'


>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE job_id LIKE 'AD___'

<<<<<<< HEAD
   IS NULL 값이 빈 셀을 검색
=======



  IS NULL 값이 빈셀을 검색
>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE manager_id IS NULL;

<<<<<<< HEAD
   두개 조건을 동시 만족하는 값을 출력
=======


   두개 조건을 동시 만족하는 값을 출력 AND
>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE salary > 4000
AND job_id = 'IT_PROG';

<<<<<<< HEAD
   샐러리는 4000이 반드시 넘고  IT_PROG와 FI_ACCOUNT 모두
=======

샐러리는 4000이 반드시 넘고 
IT_PROG와 FI_ACCOUNT 모두

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE salary > 4000
AND job_id = 'IT_PROG'
OR  job_id = 'FI_ACCOUNT';

<<<<<<< HEAD
   <> 아닌 값들만 출력
=======



   <> 아닌 값들만 출력

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE employee_id <> 105;

<<<<<<< HEAD
   not 결과값을 뒤집어 출력
=======


   NOT 결과값을 뒤집어 출력

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
SELECT *
FROM hr.employees
WHERE manager_id IS NOT NULL;





<<<<<<< HEAD






# 함수.............................................................................................
단일 행 함수는 한 번에 하나의 데이터를 처리하는 함수입니다. a1 값을 처리한 후 a2 값을 처리합니다. 
반면 그룹 함수는 여러 건의 데이터를 동시에 처리하여 해당 그룹에 해당하는 결과를 반환합니다. 
즉, d1, d2, d3, d4를 동시에 입력받아 함수를 거쳐 결괏값을 출력합니다. 
그룹 함수는 주로 나중에 배울 GROUP BY 절과 함께 쓰이며 요약된 정보를 출력해야 할 때 유용합니다.



LOWER 전부 소문자
UPPER 전부 대문자
INITCAP 첫글자만 대문자

SELECT last_name,
       LOWER(last_name) LOWER적용,
       UPPER(last_name) UPPER적용,
       email,
       INITCAP(email) INITCAP적용
FROM hr.employees;

   필요한 글자만 잘라내기(대상열, 부터, 몇개)
SELECT job_id, SUBSTR(job_id, 1, 2) 적용결과
FROM hr.employees;

   원하는 글자로 찾아서 바꾸기(대상열, 찾을값, 바꿀값)
SELECT job_id, REPLACE(job_id, 'ACCOUNT', 'ACCNT') 적용결과
FROM hr.employee;

   LPAD 왼쪽을 채우는데 자릿수를 만들어 빈공간을 채운다.(대상열, 자리수, 빈공간을 채울 문자)
SELECT first_name, LPAD(first_name, 12, '*') LPAD적용결과
FROM hr.employees;

   RPAD 오른쪽을 채우는데 자릿수를 만들어 빈공간을 채운다.
SELECT first_name, RPAD(first_name, 12, '*') RPAD적용결과
FROM hr.employees;

   LTRIM/RTRIM 왼쪽/오른쪽 부터 찾아서 만나는 값을 삭제
   주로 여백 삭제용으로 사용된다. 
SELECT job_id,
       LTRIM(job_id, 'F') LTRIM적용결과,
       RTRIM(job_id, 'T') RTRIM적용결과
FROM hr.employees;
=======
# 함수..........................

함수에는 단일 행 함수와 그룹 함수가 있는데 차이점은 다음과 같습니다.

단일 행 함수는 한 번에 하나의 데이터를 처리하는 함수입니다. a1 값을 처리한 후 a2 값을 처리합니다. 반면 그룹 함수는 여러 건의 데이터를 동시에 처리하여 해당 그룹에 해당하는 결과를 반환합니다. 즉, d1, d2, d3, d4를 동시에 입력받아 함수를 거쳐 결괏값을 출력합니다. 그룹 함수는 주로 나중에 배울 GROUP BY 절과 함께 쓰이며 요약된 정보를 출력해야 할 때 유용합니다.


LOWER 전부 소문자 UPPER 전부 대문자 INITCAP 첫글자만대문자

SELECT last_name,
    LOWER(last_name) LOWER적용,
    UPPER(last_name) UPPER적용,
    email,
    INITCAP(email) INITCAP적용
FROM hr.employees;




필요한 글자만 잘라내기 (대상열, 부터, 몇개)

SELECT job_id, SUBSTR(job_id, 1, 2) 적용결과

FROM   hr.employees;



원하는 글자로 찾아서 바꾸기 (대상열, 찾을값, 바꿀값)

SELECT job_id, REPLACE(job_id, 'ACCOUNT', 'ACCNT') 적용결과

FROM   hr.employees;


LPAD/RPAD 왼쪽/오른쪽을 채우는데 자리수를 만들어 빈공간을 채운다.
(대상열, 자리수, 빈공간을 채울 문자)

SELECT first_name, LPAD(first_name, 12, '*') LPAD적용결과

FROM   hr.employees;


SELECT first_name, RPAD(first_name, 12, '*') LPAD적용결과

FROM   hr.employees;


LTRIM/RTRIM 왼쪽/오른쪽 부터 찾아서 만나는 값을 삭제
주로 여백 삭제용으로 사용된다. 

SELECT job_id,

       LTRIM(job_id, 'F') LTRIM적용결과,

       RTRIM(job_id, 'T') RTRIM적용결과

FROM   hr.employees;

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec


ROUND 반올림 (대상열,반올림자리)
1 소수점아래 한자리로
-1 소수점위 한자리부터

SELECT salary,
       salary/30 일급,
       ROUND(salary/30, 0) 적용결과0,
       ROUND(salary/30, 1) 적용결과1,
       ROUND(salary/30, -1) 적용결과MINUS1
FROM   hr.employees;



TRUNC 버림
1 소수점아래 한자리로
-1 소수점위 한자리부터

SELECT salary,
<<<<<<< HEAD
       salary/30 일급,
       TRUNC(salary/30, 0) 적용결과0,
       TRUNC(salary/30, 1) 적용결과1,
       TRUNC(salary/30, -1) 적용결과MINUS1
=======

       salary/30 일급,

       TRUNC(salary/30, 0) 적용결과0,

       TRUNC(salary/30, 1) 적용결과1,

       TRUNC(salary/30, -1) 적용결과MINUS1

>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
FROM   hr.employees;



----------------------------------------
<<<<<<< HEAD


변환 함수
데이터 타입 변환은 오라클에 의해 자동으로(암묵적으로) 혹은 수동으로(명시적으로) 실핼할수 있다. 

자동 타입 변환

varchar2로 되어 있는 데이터값 100 은 number타입으로 자동변환되어 산술 계산될수 있다. 
반대로 number타입 100은 varchar2타입으로 자동변환되어 저장될수 있다. 


작은 따옴표로 묶였기 때문에 문자 데이터 타입, 오라클에 의해 자동으로 형변환이 이루어져 계산되었다. 
SELECT 1 + '2'
FROM DUAL;


하지만... 자동 형변환을 이용할수 있더라도 SQL 의 안정성을 위해 수동 데이터 타입 변환을 수행할것을 권장한다. 



















=======
형변환부터...
>>>>>>> d5b5181848b2ec5f3f10c6316ed3c79719c581ec
